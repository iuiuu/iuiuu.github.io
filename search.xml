<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2021/07/09/ckqzb1ozn0003itey7h4h2g96/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>git-how-to-change-the-url-for-a-remote-git-repository</title>
    <url>/2021/06/16/ckqzb1ozo0005iteya6rca5gw/</url>
    <content><![CDATA[<p>9999</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/06/04/ckqzb1ozp0007itey4fw2b58r/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>【Git常用命令】查看/修改远程仓库地址</title>
    <url>/2019/10/07/ckqzb1ozp0009itey4p8c4ne6/</url>
    <content><![CDATA[<h2 id="Git查看远程仓库地址"><a href="#Git查看远程仓库地址" class="headerlink" title="Git查看远程仓库地址"></a>Git查看远程仓库地址</h2><p>命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<p>e.g.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看远程仓库地址</span></span><br><span class="line">git remote -v</span><br><span class="line">origin	http://gogs.linjiangxiong.com/ljx/devops-doc.git (fetch)</span><br><span class="line">origin	http://gogs.linjiangxiong.com/ljx/devops-doc.git (push)</span><br></pre></td></tr></table></figure>

<h2 id="Git修改远程仓库地址"><a href="#Git修改远程仓库地址" class="headerlink" title="Git修改远程仓库地址"></a>Git修改远程仓库地址</h2><p>命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote set-url origin new.git.url/here</span><br></pre></td></tr></table></figure>

<p>e.g.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将远程仓库地址改为 HTTPS 协议</span></span><br><span class="line">git remote set-url origin https://gogs.linjiangxiong.com/ljx/devops-doc.git</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看修改后的地址</span></span><br><span class="line">git remote -v</span><br><span class="line">origin	https://gogs.linjiangxiong.com/ljx/devops-doc.git (fetch)</span><br><span class="line">origin	https://gogs.linjiangxiong.com/ljx/devops-doc.git (push)</span><br></pre></td></tr></table></figure>

<p>（END）</p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>【Git常用命令】查看/修改远程仓库地址</title>
    <url>/2019/10/07/git-how-to-change-the-url-for-a-remote-git-repository/</url>
    <content><![CDATA[<h2 id="Git查看远程仓库地址"><a href="#Git查看远程仓库地址" class="headerlink" title="Git查看远程仓库地址"></a>Git查看远程仓库地址</h2><p>命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<p>e.g.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看远程仓库地址</span></span><br><span class="line">git remote -v</span><br><span class="line">origin	http://gogs.linjiangxiong.com/ljx/devops-doc.git (fetch)</span><br><span class="line">origin	http://gogs.linjiangxiong.com/ljx/devops-doc.git (push)</span><br></pre></td></tr></table></figure>

<h2 id="Git修改远程仓库地址"><a href="#Git修改远程仓库地址" class="headerlink" title="Git修改远程仓库地址"></a>Git修改远程仓库地址</h2><p>命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote set-url origin new.git.url/here</span><br></pre></td></tr></table></figure>

<p>e.g.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将远程仓库地址改为 HTTPS 协议</span></span><br><span class="line">git remote set-url origin https://gogs.linjiangxiong.com/ljx/devops-doc.git</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看修改后的地址</span></span><br><span class="line">git remote -v</span><br><span class="line">origin	https://gogs.linjiangxiong.com/ljx/devops-doc.git (fetch)</span><br><span class="line">origin	https://gogs.linjiangxiong.com/ljx/devops-doc.git (push)</span><br></pre></td></tr></table></figure>

<p>（END）</p>
]]></content>
      <categories>
        <category>编程文摘</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>基金定投计划：每月定投2000元，共投资30年</title>
    <url>/2021/07/07/investment-plan-2000-per-month-for-30yrs/</url>
    <content><![CDATA[<blockquote>
<p>每月定投 2000 元，30 年后会变成多少资产？</p>
</blockquote>
<span id="more"></span>

<p>规则：</p>
<ul>
<li>定投基金：富国天惠成长（161005）；</li>
<li>定投金额：1000 元；</li>
<li>定投日期：每月 10 号和 24 号，如遇节假日或休息日，则根据情况提前在最近一个交易日定投，或顺延至下一个交易日定投；</li>
<li>定投当天更新<strong>净投入</strong>和<strong>总资产</strong>记录；</li>
<li>其他：若基金年化收益率低于 15%，则根据情况决定是否更换定投基金。</li>
</ul>

    <div id="echarts1602" style="width: 100%;height: 400px;margin: 0 auto"></div>
    <div id="echarts5657" style="width: 100%;height: 400px;margin: 0 auto;margin-top: 20px;"></div>
    <script src="https://cdn.jsdelivr.net/npm/echarts@5.1.2/dist/echarts.min.js"></script>
    <script src="https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"></script>

    <script type="text/javascript">
    var myChart = echarts.init(document.getElementById('echarts1602'));
    var bar_chart = echarts.init(document.getElementById('echarts5657'));
    
    $.get('/data/invest_30yrs.json').done(function (data) {
        console.log(JSON.stringify(data)); 

        var dates = [];
        var invest_data = [];
        var total_data = [];
        var records = data.data;
        var options = data.options;
        var len = records.length;
        var newestData = records[len - 1];

        for (var i = 0; i < len; i++){
          dates.push(records[i][0]);
          invest_data.push(records[i][2]);
          total_data.push(records[i][3]);
        }
        options.xAxis.data = dates;
        options.series[0].data = invest_data;
        options.series[1].data = total_data;
        myChart.setOption(options);

        var labelRight = {
          position: 'right'
        };
      
        var bar_options = {
          title: {
              text: '账户资产明细',
              subtext: '金额（元）',
              // sublink: 'http://e.weibo.com/1341556070/AjwF2AgQm'
          },
          tooltip: {
              trigger: 'axis',
              axisPointer: {            // 坐标轴指示器，坐标轴触发有效
                  type: 'shadow'        // 默认为直线，可选为：'line' | 'shadow'
              }
          },
          grid: {
              top: 80,
              bottom: 30
          },
          xAxis: {
              type: 'value',
              position: 'top',
              splitLine: {
                  lineStyle: {
                      type: 'dashed'
                  }
              }
          },
          yAxis: {
              type: 'category',
              axisLine: {show: false},
              axisLabel: {show: false},
              axisTick: {show: false},
              splitLine: {show: false},
              data: ['收益', '净投入', '总资产']
          },
          series: [
              {
                  name: '人民币',
                  type: 'bar',
                  stack: '总量',
                  label: {
                      show: true,
                      formatter: '{b}'
                  },
                  data: [
                      {value: (newestData[3] - newestData[2]).toFixed(2), label: labelRight},
                      {value: newestData[2], label: labelRight},
                      {value: newestData[3], label: labelRight},
                  ],
                  itemStyle: {
                    normal: {
        　　　　　　　　//这里是重点
                        color: function(params) {
                          //注意，如果颜色太少的话，后面颜色不会自动循环，最好多定义几个颜色
                            var colorList = ['#91c7ae', '#fc8452', '#5470c6' ]
                            // ['#c23531','#2f4554', '#61a0a8', '#d48265', '#91c7ae','#749f83', '#ca8622'];
                            return colorList[params.dataIndex]
                        }
                    }
                }
              }
          ]
      };
        bar_chart.setOption(bar_options);
    });
    </script>
    

<blockquote>
<p>图表说明：开始定投日期为 2021 年 3 月 31 日，初始金额为 1000 元，2021 年 4 月因为特殊情况没有进行定投。考虑到从 2021 年 3 月开始定投到 2021 年 6 月，总共 4 个月，每月定投 2000 元，总共需投入 8000 元，故后续三次定投（分别为 2021 年 5 月 24 日， 2021 年 6 月 10 日，2021 年 6 月 24 日）的金额临时改为 2000 元。</p>
</blockquote>
<h2 id="第一个五年目标（2021年3月-2025年2月）"><a href="#第一个五年目标（2021年3月-2025年2月）" class="headerlink" title="第一个五年目标（2021年3月-2025年2月）"></a>第一个五年目标（2021年3月-2025年2月）</h2><ul>
<li>累计净投入 <strong>120,000</strong> 元；</li>
<li>总资产 <strong>175,000</strong> 元；</li>
</ul>

    <div id="echarts2317" style="width: 100%;height: 568px;margin: 0 auto"></div>
    <div id="echarts5204" style="width: 100%;height: 568px;margin: 0 auto"></div>
    <script src="https://cdn.jsdelivr.net/npm/echarts@5.1.2/dist/echarts.min.js"></script>
    <script src="https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"></script>

    <script type="text/javascript">
    var myChart2 = echarts.init(document.getElementById('echarts2317'));
    var total_chart_id_chart = echarts.init(document.getElementById('echarts5204'));
    
    $.get('/data/invest_30yrs.json').done(function (data) {
        console.log(JSON.stringify(data)); 

        var records = data.data;
        var len = records.length;
        var newestData = records[len - 1];
        
        var options = {
          tooltip: {
            formatter: '{a} <br/>{b} : {c}%'
          },
          series: [
            {
              name: '累计净投入进度',
              type: 'gauge',
              detail: {
                valueAnimation: true,
                formatter: '{value} %',
                color: '#fd666d',
              },
              data: [{value: (newestData[2] / 120000.00 * 100).toFixed(2), name: '累计净投入进度'}],
              axisLine: {
                show: true,
                lineStyle: {
                  color: [
                    [1,new echarts.graphic.LinearGradient(0, 0, 1, 0, [
                      {
                        offset: 0.1,
                        color: "#FFC600"
                      },
                      {
                        offset: 0.6,
                        color: "#30D27C"
                      },
                      {
                        offset: 1,
                        color: "#0B95FF"
                      }
                    ])
                  ]
                ]
                  
                }
             }
            }
          ]
        };

        var total_chart_id_options = {
          series: [{
              type: 'gauge',
              axisLine: {
                  lineStyle: {
                      width: 30,
                      color: [
                          [0.3, '#67e0e3'],
                          [0.7, '#37a2da'],
                          [1, '#fd666d']
                      ]
                  }
              },
              pointer: {
                  itemStyle: {
                      color: 'auto'
                  }
              },
              axisTick: {
                  distance: -30,
                  length: 8,
                  lineStyle: {
                      color: '#fff',
                      width: 2
                  }
              },
              splitLine: {
                  distance: -30,
                  length: 30,
                  lineStyle: {
                      color: '#fff',
                      width: 4
                  }
              },
              axisLabel: {
                  color: 'auto',
                  distance: 40,
                  fontSize: 20
              },
              detail: {
                  valueAnimation: true,
                  formatter: '{value} %',
                  color: 'auto'
              },
              data: [{
                  value: (newestData[3] / 175000 * 100).toFixed(2),
                  name: '总资产进度'
              }]
          }]
      };
        
        myChart2.setOption(options);
        total_chart_id_chart.setOption(total_chart_id_options);
    });
    </script>
    ]]></content>
      <categories>
        <category>投资理财</category>
      </categories>
      <tags>
        <tag>投资理财</tag>
      </tags>
  </entry>
  <entry>
    <title>关于MySQL数据库自增主键，说几个容易被忽略的点</title>
    <url>/2019/10/12/mysql-auto-increment-id/</url>
    <content><![CDATA[<h2 id="自增主键是什么"><a href="#自增主键是什么" class="headerlink" title="自增主键是什么"></a>自增主键是什么</h2><p>自增主键是指在自增列上定义的主键。自增主键可以让主键索引尽量地保持递增顺序插入，避免了页分裂，索引也更紧凑。</p>
<p>在建表语句中一般是这么定义的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NOT NULL PRIMARY KEY AUTO_INCREMENT</span><br></pre></td></tr></table></figure>

<p>如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `t` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `step` int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="自增值保存在哪里"><a href="#自增值保存在哪里" class="headerlink" title="自增值保存在哪里"></a>自增值保存在哪里</h2><p>不同的数据库引擎对于自增值的保存策略不同：</p>
<ul>
<li>MyISAM 引擎：自增值保存在数据文件中；</li>
<li>InnoDB引擎：<ul>
<li>在 MySQL 5.7 及之前的版本，自增值保存在内存里，并没有持久化。每次重启后，第一次打开表的时候，都会去找自增值的最大值 <code>max(id)</code>，然后将 <code>max(id)+1</code> 作为这个表当前的自增值。﻿</li>
<li>在 MySQL 8.0 版本，将自增值的变更记录在了 redo log 中，重启的时候依靠 redo log 恢复重启之前的值。</li>
</ul>
</li>
</ul>
<h2 id="自增值修改机制"><a href="#自增值修改机制" class="headerlink" title="自增值修改机制"></a>自增值修改机制</h2><p>假设数据表当前的自增值是 Y，在插入一行数据的时候，数据库的执行情况如下：</p>
<ul>
<li>如果插入数据时自增字段指定了具体的值 X，就直接使用值 X 填到该自增字段，该表的自增值是否修改的判断如下：<ul>
<li>若 X&lt;Y，则该表的自增值不变；</li>
<li>若 X≥Y，则需要修改该表的自增值为 X + auto_increment_increment（步长）。</li>
</ul>
</li>
<li>如果插入数据时自增字段未指定值或指定为 0、null，则把该表当前的自增值（即 Y）填到自增字段，并修改该表的自增值为 Y + auto_increment_increment（步长）。</li>
</ul>
<p>实际上，MySQL 维护着两个系统参数：auto_increment_offset 和 auto_increment_increment，分别用来表示自增的初始值和步长，默认值都为 1。<strong>MySQL 修改数据表自增值是从 auto_increment_offset 开始，以 auto_increment_increment 为步长，持续叠加，直到找到第一个大于 X 的值，作为新的自增值。</strong></p>
<blockquote>
<p>在双 M 的主备结构里要求双写的时候，我们就可能会设置成 auto_increment_increment=2，让一个库的自增 id 都是奇数，另一个库的自增 id 都是偶数，避免两个库生成的主键发生冲突。</p>
</blockquote>
<h2 id="自增值的修改时机"><a href="#自增值的修改时机" class="headerlink" title="自增值的修改时机"></a>自增值的修改时机</h2><p><strong>数据表的自增值修改实际上是在真正插入数据的操作之前。如果没有插入成功，MySQL 也不会将自增值再改回去。也就是说，自增主键有可能会出现不连续的情况。</strong>比如在插入数据时出错（如违反唯一键约束），或者事务回滚的情况下，都会导致自增主键不连续。</p>
<p>可通过以下步骤验证：</p>
<ol>
<li><p>创建表 t_auto，包含主键、手机号和姓名三个字段，其中主键自增，手机号限制唯一。表结构如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `t_auto` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `mobile` varchar(11) DEFAULT NULL,</span><br><span class="line">  `name` varchar(20) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `m` (`mobile`)</span><br><span class="line">) ENGINE=InnoDB;</span><br></pre></td></tr></table></figure></li>
<li><p>插入一条记录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into t_auto values(null, &#x27;18500009999&#x27;, &#x27;小明&#x27;); </span><br></pre></td></tr></table></figure></li>
<li><p>执行 <code>show create table</code> 命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create table t_auto \G;</span><br></pre></td></tr></table></figure>

<p>输出结果如下，可以看到 AUTO_INCREMENT=2，表示下一次插入数据时，如果需要自动生成自增值，会生成 id=2。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: t_auto</span><br><span class="line">Create Table: CREATE TABLE `t_auto` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `mobile` varchar(11) COLLATE utf8_bin DEFAULT NULL,</span><br><span class="line">  `name` varchar(20) COLLATE utf8_bin DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `m` (`mobile`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COLLATE=utf8_bin</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure>

<p>查询表数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from t_auto;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>mobile</th>
<th>name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>18500009999</td>
<td>小明</td>
</tr>
</tbody></table>
</li>
<li><p>再插入一条数据，手机号和上一条数据一样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into t_auto values(null, &#x27;18500009999&#x27;, &#x27;小红&#x27;); </span><br></pre></td></tr></table></figure>

<p>因为碰到唯一键 m 冲突（手机号要求唯一），所以 id=2 这一行并没有插入成功，错误信息如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR 1062 (23000): Duplicate entry &#x27;18500009999&#x27; for key &#x27;m&#x27;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个语句的执行流程就是：</p>
<ol>
<li>执行器调用 InnoDB 引擎接口写入一行，传入的这一行的值是 (0, ‘18500009999’, ‘小红’);</li>
<li>InnoDB 发现用户没有指定自增 id 的值，获取表 t 当前的自增值 2；</li>
<li>将传入的行的值改成 (2, ‘18500009999’, ‘小红’);</li>
<li>将表的自增值改成 3；</li>
<li>继续执行插入数据操作，由于已经存在 mobile=18500009999 的记录，所以报 Duplicate key error，语句返回。</li>
</ol>
</blockquote>
</li>
<li><p>执行 <code>show create table</code> 命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create table t_auto \G;</span><br></pre></td></tr></table></figure>

<p>输出结果如下，可以看到 AUTO_INCREMENT=3，MySQL 没有将自增值再改回去：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: t_auto</span><br><span class="line">Create Table: CREATE TABLE `t_auto` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `mobile` varchar(11) COLLATE utf8_bin DEFAULT NULL,</span><br><span class="line">  `name` varchar(20) COLLATE utf8_bin DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `m` (`mobile`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COLLATE=utf8_bin</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure></li>
<li><p>修改手机号，再重新插入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into t_auto values(null, &#x27;18500009998&#x27;, &#x27;小红&#x27;); </span><br></pre></td></tr></table></figure>

<p>此时查询表数据，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from t_auto;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>mobile</th>
<th>name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>18500009999</td>
<td>小明</td>
</tr>
<tr>
<td>3</td>
<td>18500009998</td>
<td>小红</td>
</tr>
</tbody></table>
<p>也就是说，出现了自增主键不连续的情况。</p>
</li>
</ol>
<p>同样地，<strong>事务回滚也会出现自增主键不连续的情况。</strong>比如，</p>
<ol>
<li><p>先执行以下事务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">begin;</span><br><span class="line">insert into t_auto values(null, &#x27;18500009997&#x27;, &#x27;小江&#x27;);</span><br><span class="line">rollback;</span><br></pre></td></tr></table></figure></li>
<li><p>再执行 <code>how create table</code> 命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create table t_auto \G;</span><br></pre></td></tr></table></figure>

<p>输出结果如下，可以看到 AUTO_INCREMENT=5，MySQL 没有将自增值改回去：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: t_auto</span><br><span class="line">Create Table: CREATE TABLE `t_auto` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `mobile` varchar(11) COLLATE utf8_bin DEFAULT NULL,</span><br><span class="line">  `name` varchar(20) COLLATE utf8_bin DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `m` (`mobile`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 COLLATE=utf8_bin</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure></li>
<li><p>再插入数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into t_auto values(null, &#x27;18500009996&#x27;, &#x27;小青&#x27;);</span><br></pre></td></tr></table></figure>

<p>查询数据表，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from t_auto;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>mobile</th>
<th>name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>18500009999</td>
<td>小明</td>
</tr>
<tr>
<td>3</td>
<td>18500009998</td>
<td>小红</td>
</tr>
<tr>
<td>5</td>
<td>18500009996</td>
<td>小青</td>
</tr>
</tbody></table>
</li>
</ol>
<blockquote>
<p>在数据插入失败时，MySQL 不将自增值改回去是为了提升性能。在申请自增值时，为避免多个并行执行的事务申请到同一个自增 id，在申请的过程中会加锁，然后按顺序执行。自增 id 锁并不是一个事务锁，而是每次申请完就马上释放，以便允许别的事务再申请。</p>
<p>继续以上述的表 t_auto 为例，此时表当前自增值为 6：</p>
<ol>
<li>假设现在有两个并行执行的事务 A 和 B，其中事务 A 申请到了 id=6，事务 B 申请到了 id=7，这时数据表的自增值是 8（即 AUTO_INCREMENT=8），继续执行；</li>
<li>事务 B 正确提交，但事务 A 提交失败，比如出现唯一键冲突；</li>
<li>如果允许自增 id 回退的话，表 t_auto 会把当前的自增值改为 6，此时会出现表的自增值为 6，但表中却存在 id=7 的数据；</li>
<li>接下来其他事务申请自增值就会申请到 id=6，然后再申请到 id=7，这时就会出现插入语句报错“主键冲突”。</li>
</ol>
<p>解决这个主键冲突，有两种方法：一种是每次申请 id 时，判断这个 id 是否已经存在于表中，若存在，则跳过这个 id；另一种是把自增 id 的锁范围扩大，必须等到事务完成提交，再释放锁，下一个事务才能再申请自增 id。这两种方法都存在性能问题：一个是每次申请 id 都要去主键索引树判断 id 是否存在，另一个是锁的粒度太大，导致系统并发能力大大下降。</p>
<p>因此，<strong>为保证 MySQL 的性能，InnoDB 放弃了这个设计，语句执行失败也不回退自增 id。也正是因为这样，所以才只保证了自增 id 是递增的，但不保证是连续的。</strong></p>
</blockquote>
<h2 id="自增锁的优化"><a href="#自增锁的优化" class="headerlink" title="自增锁的优化"></a>自增锁的优化</h2><p>自增 id 锁不是事务锁，在每次申请完就立马释放，以便允许其他事务可以申请。</p>
<p>其实，在 MySQL 5.0 版本的时候，自增锁的范围是语句级别，即一个语句申请了表自增锁，这个锁要等到该语句执行完以后才释放，在此之前其他需要申请表自增锁的语句会被阻塞。此举虽然保证了数据一致性，但是降低了并发度。</p>
<p>在 MySQL 5.1.22 版本引入了一个新策略，新增参数 innodb_autoinc_lock_mode，用户可根据实际情况定制锁策略，该参数有如下值 （默认值是 1）：</p>
<ul>
<li><p>值为 0（Traditional，传统）时，采用传统锁模式，即采用之前 MySQL 5.0 版本的策略，所有 insert 操作都要申请自增锁，语句执行结束后才释放锁；</p>
</li>
<li><p>值为 1（Consecutive，连续）时：</p>
<ul>
<li>普通 insert 语句，自增锁在申请之后就马上释放；</li>
<li>批量 insert 语句，类似 insert … select、replace…select 这样的批量插入数据的语句，自增锁还是要等语句结束后才被释放；</li>
</ul>
</li>
<li><p>值为 2（Interleaved，交错）时，所有的申请自增主键的动作都是申请后就释放锁。</p>
</li>
</ul>
<p>在普通的 insert 语句里面包含多个 value 值的情况下，如以下的 insert 语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO `t_auto` (`mobile`, `name`)</span><br><span class="line">VALUES</span><br><span class="line">	(&#x27;13987890987&#x27;, &#x27;王朝&#x27;),</span><br><span class="line">	(&#x27;13987890988&#x27;, &#x27;马汉&#x27;),</span><br><span class="line">	(&#x27;13987890989&#x27;, &#x27;展昭&#x27;);</span><br></pre></td></tr></table></figure>

<p>因为这类语句在申请自增 id 的时候，是可以精确计算出需要多少个 id 的，然后一次性申请，申请完成后锁就可以释放了。</p>
<p>而对于批量插入数据的语句（select … insert，replace … select 和 load data 语句），MySQL 有一个批量申请自增 id 的策略（<strong>注：该策略是导致自增 id 不连续的第三种原因。</strong>）：</p>
<ol>
<li>语句执行过程中，第一次申请自增 id，会分配 1 个；</li>
<li>1 个用完以后，这个语句第二次申请自增 id，会分配 2 个；</li>
<li>2 个用完以后，还是这个语句，第三次申请自增 id，会分配 4 个；</li>
<li>依此类推，同一个语句去申请自增 id，每次申请到的自增 id 个数都是上一次的两倍。</li>
</ol>
<p>我们可以通过以下这个语句序列验证：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建表step_log</span><br><span class="line">CREATE TABLE `step_log` (</span><br><span class="line">  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `step` int(11) NOT NULL DEFAULT 1 COMMENT &#x27;步长&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">-- 插入数据</span><br><span class="line">insert into step_log values(null, 1);</span><br><span class="line">insert into step_log values(null, 2);</span><br><span class="line">insert into step_log values(null, 3);</span><br><span class="line">insert into step_log values(null, 4);</span><br><span class="line"></span><br><span class="line">-- 创建表step_log_2，其结构与表step_log相同</span><br><span class="line">create table step_log_2 like step_log;</span><br><span class="line"></span><br><span class="line">-- 批量插入数据</span><br><span class="line">insert into step_log_2(step) select step from step_log;</span><br><span class="line"></span><br><span class="line">-- 插入数据</span><br><span class="line">insert into step_log_2 values(null, 5);</span><br><span class="line"></span><br><span class="line">-- 查询此时表step_log_2数据：</span><br><span class="line">select * from step_log_2;</span><br><span class="line"></span><br><span class="line">-- 输出如下，id=5、id=6、id=7 就被跳过了：</span><br><span class="line">+----+------+</span><br><span class="line">| id | step |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 |    1 |</span><br><span class="line">|  2 |    2 |</span><br><span class="line">|  3 |    3 |</span><br><span class="line">|  4 |    4 |</span><br><span class="line">|  8 |    5 |</span><br><span class="line">+----+------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>引申：为什么默认设置下，insert … select 要使用语句级的锁？为什么这个参数的默认值不是 2？</strong></p>
<p>这么设计还是为了数据的一致性。</p>
<p>新建数据表 step_log，一起来看一下这个场景：往表 step_log 中插入了 4 行数据，然后创建了一个相同结构的表 step_log_2，然后两个 session 同时执行向表 step_log_2 中插入数据的操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `step_log` (</span><br><span class="line">  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `step` int(11) NOT NULL DEFAULT 1 COMMENT &#x27;步长&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>session A</th>
<th>session B</th>
</tr>
</thead>
<tbody><tr>
<td>insert into step_log values(null, 1);<br/>insert into step_log values(null, 2);<br/>insert into step_log values(null, 3);<br/>insert into step_log values(null, 4);</td>
<td></td>
</tr>
<tr>
<td></td>
<td>create table step_log_2 like step_log;</td>
</tr>
<tr>
<td>insert into step_log values(null, 5);</td>
<td>insert into step_log_2(step) select step from step_log;</td>
</tr>
</tbody></table>
<p>设想一下，如果 session B 是申请了自增值以后马上就释放自增锁，那么就可能出现这样的情况：</p>
<ul>
<li>session B 先插入了两个记录，(1,1,1)、(2,2,2)；</li>
<li>然后，session A 来申请自增 id 得到 id=3，插入了（3,5,5)；</li>
<li>之后，session B 继续执行，插入两条记录 (4,3,3)、 (5,4,4)。</li>
</ul>
<p>你可能会说，这也没关系吧，毕竟 session B 的语义本身就没有要求表 t2 的所有行的数据都跟 session A 相同。</p>
<p>是的，从数据逻辑上看是对的。但是，如果我们现在的 binlog_format=statement，你可以设想下，binlog 会怎么记录呢？</p>
<p>由于两个 session 是同时执行插入数据命令的，所以 binlog 里面对表 t2 的更新日志只有两种情况：要么先记 session A 的，要么先记 session B 的。</p>
<p>但不论是哪一种，这个 binlog 拿去从库执行，或者用来恢复临时实例，备库和临时实例里面，session B 这个语句执行出来，生成的结果里面，id 都是连续的。这时，这个库就发生了数据不一致。</p>
<p>你可以分析一下，出现这个问题的原因是什么？</p>
<p>其实，这是因为原库 session B 的 insert 语句，生成的 id 不连续。这个不连续的 id，用 statement 格式的 binlog 来串行执行，是执行不出来的。</p>
<p>而要解决这个问题，有两种思路：</p>
<ol>
<li>一种思路是，让原库的批量插入数据语句，固定生成连续的 id 值。所以，自增锁直到语句执行结束才释放，就是为了达到这个目的。</li>
<li>另一种思路是，在 binlog 里面把插入数据的操作都如实记录进来，到备库执行的时候，不再依赖于自增主键去生成。这种情况，其实就是 innodb_autoinc_lock_mode 设置为 2，同时 binlog_format 设置为 row。</li>
</ol>
<p>因此，<strong>在生产上，尤其是有 insert … select 这种批量插入数据的场景时，从并发插入数据性能的角度考虑，我建议你这样设置：innodb_autoinc_lock_mode=2 ，并且 binlog_format=row</strong>. 这样做，既能提升并发性，又不会出现数据一致性问题。</p>
<p>需要注意的是，我这里说的<strong>批量插入数据，包含的语句类型是 insert … select、replace … select 和 load data 语句。</strong></p>
</blockquote>
<h2 id="五、自增值达到上限的逻辑"><a href="#五、自增值达到上限的逻辑" class="headerlink" title="五、自增值达到上限的逻辑"></a>五、自增值达到上限的逻辑</h2><p>表定义的自增值达到上限后的逻辑是：<strong>再申请下一个 id 时，得到的值保持不变。</strong></p>
<p>可通过以下步骤验证：</p>
<ol>
<li><p>创建表 t，其中只包括一个主增主键，并设置 auto_increment=4294967295</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table t(id int unsigned auto_increment primary key) auto_increment=4294967295;</span><br></pre></td></tr></table></figure></li>
<li><p>插入一行数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into t values(null);</span><br></pre></td></tr></table></figure></li>
<li><p>查看此时表 t 的创建语句:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create table t;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `t` (</span><br><span class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=4294967295 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;</span><br></pre></td></tr></table></figure></li>
<li><p>再插入一行数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into t values(null);</span><br></pre></td></tr></table></figure>

<p>则提示错误信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR 1062 (23000): Duplicate entry &#x27;4294967295&#x27; for key &#x27;PRIMARY&#x27;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>可以看到，第一次插入数据成功后，这个表的 AUTO_INCREMENT 没有改变（还是 4294967295），导致了第二次插入的时候又拿到相同的自增 id 值，再试图执行时，报主键冲突错误。</p>
<p>（END）</p>
]]></content>
      <categories>
        <category>编程文摘</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
